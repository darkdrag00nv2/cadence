// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindAddressValue-1]
	_ = x[MemoryKindStringValue-2]
	_ = x[MemoryKindCharacterValue-3]
	_ = x[MemoryKindNumberValue-4]
	_ = x[MemoryKindArrayValueBase-5]
	_ = x[MemoryKindDictionaryValueBase-6]
	_ = x[MemoryKindCompositeValueBase-7]
	_ = x[MemoryKindSimpleCompositeValueBase-8]
	_ = x[MemoryKindOptionalValue-9]
	_ = x[MemoryKindTypeValue-10]
	_ = x[MemoryKindPathValue-11]
	_ = x[MemoryKindIDCapabilityValue-12]
	_ = x[MemoryKindPathCapabilityValue-13]
	_ = x[MemoryKindPathLinkValue-14]
	_ = x[MemoryKindAccountLinkValue-15]
	_ = x[MemoryKindStorageReferenceValue-16]
	_ = x[MemoryKindAccountReferenceValue-17]
	_ = x[MemoryKindEphemeralReferenceValue-18]
	_ = x[MemoryKindInterpretedFunctionValue-19]
	_ = x[MemoryKindHostFunctionValue-20]
	_ = x[MemoryKindBoundFunctionValue-21]
	_ = x[MemoryKindBigInt-22]
	_ = x[MemoryKindSimpleCompositeValue-23]
	_ = x[MemoryKindPublishedValue-24]
	_ = x[MemoryKindStorageCapabilityControllerValue-25]
	_ = x[MemoryKindAccountCapabilityControllerValue-26]
	_ = x[MemoryKindAtreeArrayDataSlab-27]
	_ = x[MemoryKindAtreeArrayMetaDataSlab-28]
	_ = x[MemoryKindAtreeArrayElementOverhead-29]
	_ = x[MemoryKindAtreeMapDataSlab-30]
	_ = x[MemoryKindAtreeMapMetaDataSlab-31]
	_ = x[MemoryKindAtreeMapElementOverhead-32]
	_ = x[MemoryKindAtreeMapPreAllocatedElement-33]
	_ = x[MemoryKindAtreeEncodedSlab-34]
	_ = x[MemoryKindPrimitiveStaticType-35]
	_ = x[MemoryKindCompositeStaticType-36]
	_ = x[MemoryKindInterfaceStaticType-37]
	_ = x[MemoryKindVariableSizedStaticType-38]
	_ = x[MemoryKindConstantSizedStaticType-39]
	_ = x[MemoryKindDictionaryStaticType-40]
	_ = x[MemoryKindInclusiveRangeStaticType-41]
	_ = x[MemoryKindOptionalStaticType-42]
	_ = x[MemoryKindRestrictedStaticType-43]
	_ = x[MemoryKindReferenceStaticType-44]
	_ = x[MemoryKindCapabilityStaticType-45]
	_ = x[MemoryKindFunctionStaticType-46]
	_ = x[MemoryKindCadenceVoidValue-47]
	_ = x[MemoryKindCadenceOptionalValue-48]
	_ = x[MemoryKindCadenceBoolValue-49]
	_ = x[MemoryKindCadenceStringValue-50]
	_ = x[MemoryKindCadenceCharacterValue-51]
	_ = x[MemoryKindCadenceAddressValue-52]
	_ = x[MemoryKindCadenceIntValue-53]
	_ = x[MemoryKindCadenceNumberValue-54]
	_ = x[MemoryKindCadenceArrayValueBase-55]
	_ = x[MemoryKindCadenceArrayValueLength-56]
	_ = x[MemoryKindCadenceDictionaryValue-57]
	_ = x[MemoryKindCadenceInclusiveRangeValue-58]
	_ = x[MemoryKindCadenceKeyValuePair-59]
	_ = x[MemoryKindCadenceStructValueBase-60]
	_ = x[MemoryKindCadenceStructValueSize-61]
	_ = x[MemoryKindCadenceResourceValueBase-62]
	_ = x[MemoryKindCadenceAttachmentValueBase-63]
	_ = x[MemoryKindCadenceResourceValueSize-64]
	_ = x[MemoryKindCadenceAttachmentValueSize-65]
	_ = x[MemoryKindCadenceEventValueBase-66]
	_ = x[MemoryKindCadenceEventValueSize-67]
	_ = x[MemoryKindCadenceContractValueBase-68]
	_ = x[MemoryKindCadenceContractValueSize-69]
	_ = x[MemoryKindCadenceEnumValueBase-70]
	_ = x[MemoryKindCadenceEnumValueSize-71]
	_ = x[MemoryKindCadencePathLinkValue-72]
	_ = x[MemoryKindCadenceAccountLinkValue-73]
	_ = x[MemoryKindCadencePathValue-74]
	_ = x[MemoryKindCadenceTypeValue-75]
	_ = x[MemoryKindCadenceIDCapabilityValue-76]
	_ = x[MemoryKindCadencePathCapabilityValue-77]
	_ = x[MemoryKindCadenceFunctionValue-78]
	_ = x[MemoryKindCadenceOptionalType-79]
	_ = x[MemoryKindCadenceVariableSizedArrayType-80]
	_ = x[MemoryKindCadenceConstantSizedArrayType-81]
	_ = x[MemoryKindCadenceDictionaryType-82]
	_ = x[MemoryKindCadenceInclusiveRangeType-83]
	_ = x[MemoryKindCadenceField-84]
	_ = x[MemoryKindCadenceParameter-85]
	_ = x[MemoryKindCadenceTypeParameter-86]
	_ = x[MemoryKindCadenceStructType-87]
	_ = x[MemoryKindCadenceResourceType-88]
	_ = x[MemoryKindCadenceAttachmentType-89]
	_ = x[MemoryKindCadenceEventType-90]
	_ = x[MemoryKindCadenceContractType-91]
	_ = x[MemoryKindCadenceStructInterfaceType-92]
	_ = x[MemoryKindCadenceResourceInterfaceType-93]
	_ = x[MemoryKindCadenceContractInterfaceType-94]
	_ = x[MemoryKindCadenceFunctionType-95]
	_ = x[MemoryKindCadenceReferenceType-96]
	_ = x[MemoryKindCadenceRestrictedType-97]
	_ = x[MemoryKindCadenceCapabilityType-98]
	_ = x[MemoryKindCadenceEnumType-99]
	_ = x[MemoryKindRawString-100]
	_ = x[MemoryKindAddressLocation-101]
	_ = x[MemoryKindBytes-102]
	_ = x[MemoryKindVariable-103]
	_ = x[MemoryKindCompositeTypeInfo-104]
	_ = x[MemoryKindCompositeField-105]
	_ = x[MemoryKindInvocation-106]
	_ = x[MemoryKindStorageMap-107]
	_ = x[MemoryKindStorageKey-108]
	_ = x[MemoryKindTypeToken-109]
	_ = x[MemoryKindErrorToken-110]
	_ = x[MemoryKindSpaceToken-111]
	_ = x[MemoryKindProgram-112]
	_ = x[MemoryKindIdentifier-113]
	_ = x[MemoryKindArgument-114]
	_ = x[MemoryKindBlock-115]
	_ = x[MemoryKindFunctionBlock-116]
	_ = x[MemoryKindParameter-117]
	_ = x[MemoryKindParameterList-118]
	_ = x[MemoryKindTypeParameter-119]
	_ = x[MemoryKindTypeParameterList-120]
	_ = x[MemoryKindTransfer-121]
	_ = x[MemoryKindMembers-122]
	_ = x[MemoryKindTypeAnnotation-123]
	_ = x[MemoryKindDictionaryEntry-124]
	_ = x[MemoryKindFunctionDeclaration-125]
	_ = x[MemoryKindCompositeDeclaration-126]
	_ = x[MemoryKindAttachmentDeclaration-127]
	_ = x[MemoryKindInterfaceDeclaration-128]
	_ = x[MemoryKindEnumCaseDeclaration-129]
	_ = x[MemoryKindFieldDeclaration-130]
	_ = x[MemoryKindTransactionDeclaration-131]
	_ = x[MemoryKindImportDeclaration-132]
	_ = x[MemoryKindVariableDeclaration-133]
	_ = x[MemoryKindSpecialFunctionDeclaration-134]
	_ = x[MemoryKindPragmaDeclaration-135]
	_ = x[MemoryKindAssignmentStatement-136]
	_ = x[MemoryKindBreakStatement-137]
	_ = x[MemoryKindContinueStatement-138]
	_ = x[MemoryKindEmitStatement-139]
	_ = x[MemoryKindExpressionStatement-140]
	_ = x[MemoryKindForStatement-141]
	_ = x[MemoryKindIfStatement-142]
	_ = x[MemoryKindReturnStatement-143]
	_ = x[MemoryKindSwapStatement-144]
	_ = x[MemoryKindSwitchStatement-145]
	_ = x[MemoryKindWhileStatement-146]
	_ = x[MemoryKindRemoveStatement-147]
	_ = x[MemoryKindBooleanExpression-148]
	_ = x[MemoryKindVoidExpression-149]
	_ = x[MemoryKindNilExpression-150]
	_ = x[MemoryKindStringExpression-151]
	_ = x[MemoryKindIntegerExpression-152]
	_ = x[MemoryKindFixedPointExpression-153]
	_ = x[MemoryKindArrayExpression-154]
	_ = x[MemoryKindDictionaryExpression-155]
	_ = x[MemoryKindIdentifierExpression-156]
	_ = x[MemoryKindInvocationExpression-157]
	_ = x[MemoryKindMemberExpression-158]
	_ = x[MemoryKindIndexExpression-159]
	_ = x[MemoryKindConditionalExpression-160]
	_ = x[MemoryKindUnaryExpression-161]
	_ = x[MemoryKindBinaryExpression-162]
	_ = x[MemoryKindFunctionExpression-163]
	_ = x[MemoryKindCastingExpression-164]
	_ = x[MemoryKindCreateExpression-165]
	_ = x[MemoryKindDestroyExpression-166]
	_ = x[MemoryKindReferenceExpression-167]
	_ = x[MemoryKindForceExpression-168]
	_ = x[MemoryKindPathExpression-169]
	_ = x[MemoryKindAttachExpression-170]
	_ = x[MemoryKindConstantSizedType-171]
	_ = x[MemoryKindDictionaryType-172]
	_ = x[MemoryKindFunctionType-173]
	_ = x[MemoryKindInstantiationType-174]
	_ = x[MemoryKindNominalType-175]
	_ = x[MemoryKindOptionalType-176]
	_ = x[MemoryKindReferenceType-177]
	_ = x[MemoryKindRestrictedType-178]
	_ = x[MemoryKindVariableSizedType-179]
	_ = x[MemoryKindPosition-180]
	_ = x[MemoryKindRange-181]
	_ = x[MemoryKindElaboration-182]
	_ = x[MemoryKindActivation-183]
	_ = x[MemoryKindActivationEntries-184]
	_ = x[MemoryKindVariableSizedSemaType-185]
	_ = x[MemoryKindConstantSizedSemaType-186]
	_ = x[MemoryKindDictionarySemaType-187]
	_ = x[MemoryKindOptionalSemaType-188]
	_ = x[MemoryKindRestrictedSemaType-189]
	_ = x[MemoryKindReferenceSemaType-190]
	_ = x[MemoryKindCapabilitySemaType-191]
	_ = x[MemoryKindOrderedMap-192]
	_ = x[MemoryKindOrderedMapEntryList-193]
	_ = x[MemoryKindOrderedMapEntry-194]
	_ = x[MemoryKindLast-195]
}

const _MemoryKind_name = "UnknownAddressValueStringValueCharacterValueNumberValueArrayValueBaseDictionaryValueBaseCompositeValueBaseSimpleCompositeValueBaseOptionalValueTypeValuePathValueIDCapabilityValuePathCapabilityValuePathLinkValueAccountLinkValueStorageReferenceValueAccountReferenceValueEphemeralReferenceValueInterpretedFunctionValueHostFunctionValueBoundFunctionValueBigIntSimpleCompositeValuePublishedValueStorageCapabilityControllerValueAccountCapabilityControllerValueAtreeArrayDataSlabAtreeArrayMetaDataSlabAtreeArrayElementOverheadAtreeMapDataSlabAtreeMapMetaDataSlabAtreeMapElementOverheadAtreeMapPreAllocatedElementAtreeEncodedSlabPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeInclusiveRangeStaticTypeOptionalStaticTypeRestrictedStaticTypeReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeCadenceVoidValueCadenceOptionalValueCadenceBoolValueCadenceStringValueCadenceCharacterValueCadenceAddressValueCadenceIntValueCadenceNumberValueCadenceArrayValueBaseCadenceArrayValueLengthCadenceDictionaryValueCadenceInclusiveRangeValueCadenceKeyValuePairCadenceStructValueBaseCadenceStructValueSizeCadenceResourceValueBaseCadenceAttachmentValueBaseCadenceResourceValueSizeCadenceAttachmentValueSizeCadenceEventValueBaseCadenceEventValueSizeCadenceContractValueBaseCadenceContractValueSizeCadenceEnumValueBaseCadenceEnumValueSizeCadencePathLinkValueCadenceAccountLinkValueCadencePathValueCadenceTypeValueCadenceIDCapabilityValueCadencePathCapabilityValueCadenceFunctionValueCadenceOptionalTypeCadenceVariableSizedArrayTypeCadenceConstantSizedArrayTypeCadenceDictionaryTypeCadenceInclusiveRangeTypeCadenceFieldCadenceParameterCadenceTypeParameterCadenceStructTypeCadenceResourceTypeCadenceAttachmentTypeCadenceEventTypeCadenceContractTypeCadenceStructInterfaceTypeCadenceResourceInterfaceTypeCadenceContractInterfaceTypeCadenceFunctionTypeCadenceReferenceTypeCadenceRestrictedTypeCadenceCapabilityTypeCadenceEnumTypeRawStringAddressLocationBytesVariableCompositeTypeInfoCompositeFieldInvocationStorageMapStorageKeyTypeTokenErrorTokenSpaceTokenProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTypeParameterTypeParameterListTransferMembersTypeAnnotationDictionaryEntryFunctionDeclarationCompositeDeclarationAttachmentDeclarationInterfaceDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementRemoveStatementBooleanExpressionVoidExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionAttachExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeRestrictedTypeVariableSizedTypePositionRangeElaborationActivationActivationEntriesVariableSizedSemaTypeConstantSizedSemaTypeDictionarySemaTypeOptionalSemaTypeRestrictedSemaTypeReferenceSemaTypeCapabilitySemaTypeOrderedMapOrderedMapEntryListOrderedMapEntryLast"

var _MemoryKind_index = [...]uint16{0, 7, 19, 30, 44, 55, 69, 88, 106, 130, 143, 152, 161, 178, 197, 210, 226, 247, 268, 291, 315, 332, 350, 356, 376, 390, 422, 454, 472, 494, 519, 535, 555, 578, 605, 621, 640, 659, 678, 701, 724, 744, 768, 786, 806, 825, 845, 863, 879, 899, 915, 933, 954, 973, 988, 1006, 1027, 1050, 1072, 1098, 1117, 1139, 1161, 1185, 1211, 1235, 1261, 1282, 1303, 1327, 1351, 1371, 1391, 1411, 1434, 1450, 1466, 1490, 1516, 1536, 1555, 1584, 1613, 1634, 1659, 1671, 1687, 1707, 1724, 1743, 1764, 1780, 1799, 1825, 1853, 1881, 1900, 1920, 1941, 1962, 1977, 1986, 2001, 2006, 2014, 2031, 2045, 2055, 2065, 2075, 2084, 2094, 2104, 2111, 2121, 2129, 2134, 2147, 2156, 2169, 2182, 2199, 2207, 2214, 2228, 2243, 2262, 2282, 2303, 2323, 2342, 2358, 2380, 2397, 2416, 2442, 2459, 2478, 2492, 2509, 2522, 2541, 2553, 2564, 2579, 2592, 2607, 2621, 2636, 2653, 2667, 2680, 2696, 2713, 2733, 2748, 2768, 2788, 2808, 2824, 2839, 2860, 2875, 2891, 2909, 2926, 2942, 2959, 2978, 2993, 3007, 3023, 3040, 3054, 3066, 3083, 3094, 3106, 3119, 3133, 3150, 3158, 3163, 3174, 3184, 3201, 3222, 3243, 3261, 3277, 3295, 3312, 3330, 3340, 3359, 3374, 3378}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
